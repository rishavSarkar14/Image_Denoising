-- -------------------------------------------------------------
--
-- Module: filter
-- Generated by MATLAB(R) 9.14 and Filter Design HDL Coder 3.1.13.
-- Generated on: 2023-04-08 00:28:05
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- OptimizeForHDL: on
-- TestBenchStimulus: step ramp chirp 

-- Filter Specifications:
--
-- Sample Rate     : N/A (normalized frequency)
-- Response        : Lowpass
-- Specification   : Fp,Fst,Ap,Ast
-- Stopband Atten. : 80 dB
-- Passband Edge   : 0.4
-- Stopband Edge   : 0.5
-- Passband Ripple : 1 dB
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Implementation    : Fully parallel
-- Folding Factor        : 1
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time IIR Filter (real)
-- -------------------------------
-- Filter Structure    : Direct-Form II, Second-Order Sections
-- Number of Sections  : 16
-- Stable              : Yes
-- Linear Phase        : No
-- -------------------------------------------------------------



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY filter IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    real; -- double
         filter_out                      :   OUT   real  -- double
         );

END filter;


----------------------------------------------------------------
--Module Architecture: filter
----------------------------------------------------------------
ARCHITECTURE rtl OF filter IS
  -- Local Functions
  -- Type Definitions
  TYPE delay_pipeline_type IS ARRAY (NATURAL range <>) OF real; -- double
  -- Constants
  CONSTANT scaleconst1                    : real := 3.3897766481867514E-01; -- double
  CONSTANT coeff_b1_section1              : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_b2_section1              : real := 2.0000000000000000E+00; -- double
  CONSTANT coeff_b3_section1              : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_a2_section1              : real := -5.5160303496341567E-01; -- double
  CONSTANT coeff_a3_section1              : real := 9.0751369423811601E-01; -- double
  CONSTANT scaleconst2                    : real := 3.1041575595448406E-01; -- double
  CONSTANT coeff_b1_section2              : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_b2_section2              : real := 2.0000000000000000E+00; -- double
  CONSTANT coeff_b3_section2              : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_a2_section2              : real := -5.0512553143154193E-01; -- double
  CONSTANT coeff_a3_section2              : real := 7.4678855524947807E-01; -- double
  CONSTANT scaleconst3                    : real := 2.8663644680810990E-01; -- double
  CONSTANT coeff_b1_section3              : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_b2_section3              : real := 2.0000000000000000E+00; -- double
  CONSTANT coeff_b3_section3              : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_a2_section3              : real := -4.6643053628639086E-01; -- double
  CONSTANT coeff_a3_section3              : real := 6.1297632351883058E-01; -- double
  CONSTANT scaleconst4                    : real := 2.6673308605520540E-01; -- double
  CONSTANT coeff_b1_section4              : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_b2_section4              : real := 2.0000000000000000E+00; -- double
  CONSTANT coeff_b3_section4              : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_a2_section4              : real := -4.3404269680101781E-01; -- double
  CONSTANT coeff_a3_section4              : real := 5.0097504102183932E-01; -- double
  CONSTANT scaleconst5                    : real := 2.5001289551069683E-01; -- double
  CONSTANT coeff_b1_section5              : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_b2_section5              : real := 2.0000000000000000E+00; -- double
  CONSTANT coeff_b3_section5              : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_a2_section5              : real := -4.0683468634271513E-01; -- double
  CONSTANT coeff_a3_section5              : real := 4.0688626838550263E-01; -- double
  CONSTANT scaleconst6                    : real := 2.3594090194989178E-01; -- double
  CONSTANT coeff_b1_section6              : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_b2_section6              : real := 2.0000000000000000E+00; -- double
  CONSTANT coeff_b3_section6              : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_a2_section6              : real := -3.8393596715932049E-01; -- double
  CONSTANT coeff_a3_section6              : real := 3.2769957495888768E-01; -- double
  CONSTANT scaleconst7                    : real := 2.2410039725600028E-01; -- double
  CONSTANT coeff_b1_section7              : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_b2_section7              : real := 2.0000000000000000E+00; -- double
  CONSTANT coeff_b3_section7              : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_a2_section7              : real := -3.6466844896415324E-01; -- double
  CONSTANT coeff_a3_section7              : real := 2.6107003798815437E-01; -- double
  CONSTANT scaleconst8                    : real := 2.1416465916044491E-01; -- double
  CONSTANT coeff_b1_section8              : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_b2_section8              : real := 2.0000000000000000E+00; -- double
  CONSTANT coeff_b3_section8              : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_a2_section8              : real := -3.4850047137471052E-01; -- double
  CONSTANT coeff_a3_section8              : real := 2.0515910801649034E-01; -- double
  CONSTANT scaleconst9                    : real := 2.0587647763669398E-01; -- double
  CONSTANT coeff_b1_section9              : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_b2_section9              : real := 2.0000000000000000E+00; -- double
  CONSTANT coeff_b3_section9              : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_a2_section9              : real := -3.3501348813859005E-01; -- double
  CONSTANT coeff_a3_section9              : real := 1.5851939868536602E-01; -- double
  CONSTANT scaleconst10                   : real := 1.9903318373195175E-01; -- double
  CONSTANT coeff_b1_section10             : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_b2_section10             : real := 2.0000000000000000E+00; -- double
  CONSTANT coeff_b3_section10             : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_a2_section10             : real := -3.2387770522787340E-01; -- double
  CONSTANT coeff_a3_section10             : real := 1.2001044015568049E-01; -- double
  CONSTANT scaleconst11                   : real := 1.9347562300043050E-01; -- double
  CONSTANT coeff_b1_section11             : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_b2_section11             : real := 2.0000000000000000E+00; -- double
  CONSTANT coeff_b3_section11             : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_a2_section11             : real := -3.1483413780539898E-01; -- double
  CONSTANT coeff_a3_section11             : real := 8.8736629807120909E-02; -- double
  CONSTANT scaleconst12                   : real := 1.8908000690358351E-01; -- double
  CONSTANT coeff_b1_section12             : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_b2_section12             : real := 2.0000000000000000E+00; -- double
  CONSTANT coeff_b3_section12             : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_a2_section12             : real := -3.0768135037661126E-01; -- double
  CONSTANT coeff_a3_section12             : real := 6.4001377990945282E-02; -- double
  CONSTANT scaleconst13                   : real := 1.8575190521695648E-01; -- double
  CONSTANT coeff_b1_section13             : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_b2_section13             : real := 2.0000000000000000E+00; -- double
  CONSTANT coeff_b3_section13             : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_a2_section13             : real := -3.0226568090472339E-01; -- double
  CONSTANT coeff_a3_section13             : real := 4.5273301772549374E-02; -- double
  CONSTANT scaleconst14                   : real := 1.8342186812452049E-01; -- double
  CONSTANT coeff_b1_section14             : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_b2_section14             : real := 2.0000000000000000E+00; -- double
  CONSTANT coeff_b3_section14             : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_a2_section14             : real := -2.9847411684267072E-01; -- double
  CONSTANT coeff_a3_section14             : real := 3.2161589340752694E-02; -- double
  CONSTANT scaleconst15                   : real := 1.8204232467817144E-01; -- double
  CONSTANT coeff_b1_section15             : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_b2_section15             : real := 2.0000000000000000E+00; -- double
  CONSTANT coeff_b3_section15             : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_a2_section15             : real := -2.9622924813641810E-01; -- double
  CONSTANT coeff_a3_section15             : real := 2.4398546849103954E-02; -- double
  CONSTANT scaleconst16                   : real := 4.2612852310048643E-01; -- double
  CONSTANT coeff_b1_section16             : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_b2_section16             : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_b3_section16             : real := 0.0000000000000000E+00; -- double
  CONSTANT coeff_a2_section16             : real := -1.4774295379902713E-01; -- double
  CONSTANT coeff_a3_section16             : real := 0.0000000000000000E+00; -- double
  -- Signals
  SIGNAL input_register                   : real := 0.0; -- double
  SIGNAL scale1                           : real := 0.0; -- double
  SIGNAL scaletypeconvert1                : real := 0.0; -- double
  -- Section 1 Signals 
  SIGNAL a1sum1                           : real := 0.0; -- double
  SIGNAL a2sum1                           : real := 0.0; -- double
  SIGNAL b1sum1                           : real := 0.0; -- double
  SIGNAL b2sum1                           : real := 0.0; -- double
  SIGNAL delay_section1                   : delay_pipeline_type(0 TO 1) := (0.0, 0.0); -- double
  SIGNAL inputconv1                       : real := 0.0; -- double
  SIGNAL a2mul1                           : real := 0.0; -- double
  SIGNAL a3mul1                           : real := 0.0; -- double
  SIGNAL b2mul1                           : real := 0.0; -- double
  SIGNAL scale2                           : real := 0.0; -- double
  SIGNAL scaletypeconvert2                : real := 0.0; -- double
  -- Section 2 Signals 
  SIGNAL a1sum2                           : real := 0.0; -- double
  SIGNAL a2sum2                           : real := 0.0; -- double
  SIGNAL b1sum2                           : real := 0.0; -- double
  SIGNAL b2sum2                           : real := 0.0; -- double
  SIGNAL delay_section2                   : delay_pipeline_type(0 TO 1) := (0.0, 0.0); -- double
  SIGNAL inputconv2                       : real := 0.0; -- double
  SIGNAL a2mul2                           : real := 0.0; -- double
  SIGNAL a3mul2                           : real := 0.0; -- double
  SIGNAL b2mul2                           : real := 0.0; -- double
  SIGNAL scale3                           : real := 0.0; -- double
  SIGNAL scaletypeconvert3                : real := 0.0; -- double
  -- Section 3 Signals 
  SIGNAL a1sum3                           : real := 0.0; -- double
  SIGNAL a2sum3                           : real := 0.0; -- double
  SIGNAL b1sum3                           : real := 0.0; -- double
  SIGNAL b2sum3                           : real := 0.0; -- double
  SIGNAL delay_section3                   : delay_pipeline_type(0 TO 1) := (0.0, 0.0); -- double
  SIGNAL inputconv3                       : real := 0.0; -- double
  SIGNAL a2mul3                           : real := 0.0; -- double
  SIGNAL a3mul3                           : real := 0.0; -- double
  SIGNAL b2mul3                           : real := 0.0; -- double
  SIGNAL scale4                           : real := 0.0; -- double
  SIGNAL scaletypeconvert4                : real := 0.0; -- double
  -- Section 4 Signals 
  SIGNAL a1sum4                           : real := 0.0; -- double
  SIGNAL a2sum4                           : real := 0.0; -- double
  SIGNAL b1sum4                           : real := 0.0; -- double
  SIGNAL b2sum4                           : real := 0.0; -- double
  SIGNAL delay_section4                   : delay_pipeline_type(0 TO 1) := (0.0, 0.0); -- double
  SIGNAL inputconv4                       : real := 0.0; -- double
  SIGNAL a2mul4                           : real := 0.0; -- double
  SIGNAL a3mul4                           : real := 0.0; -- double
  SIGNAL b2mul4                           : real := 0.0; -- double
  SIGNAL scale5                           : real := 0.0; -- double
  SIGNAL scaletypeconvert5                : real := 0.0; -- double
  -- Section 5 Signals 
  SIGNAL a1sum5                           : real := 0.0; -- double
  SIGNAL a2sum5                           : real := 0.0; -- double
  SIGNAL b1sum5                           : real := 0.0; -- double
  SIGNAL b2sum5                           : real := 0.0; -- double
  SIGNAL delay_section5                   : delay_pipeline_type(0 TO 1) := (0.0, 0.0); -- double
  SIGNAL inputconv5                       : real := 0.0; -- double
  SIGNAL a2mul5                           : real := 0.0; -- double
  SIGNAL a3mul5                           : real := 0.0; -- double
  SIGNAL b2mul5                           : real := 0.0; -- double
  SIGNAL scale6                           : real := 0.0; -- double
  SIGNAL scaletypeconvert6                : real := 0.0; -- double
  -- Section 6 Signals 
  SIGNAL a1sum6                           : real := 0.0; -- double
  SIGNAL a2sum6                           : real := 0.0; -- double
  SIGNAL b1sum6                           : real := 0.0; -- double
  SIGNAL b2sum6                           : real := 0.0; -- double
  SIGNAL delay_section6                   : delay_pipeline_type(0 TO 1) := (0.0, 0.0); -- double
  SIGNAL inputconv6                       : real := 0.0; -- double
  SIGNAL a2mul6                           : real := 0.0; -- double
  SIGNAL a3mul6                           : real := 0.0; -- double
  SIGNAL b2mul6                           : real := 0.0; -- double
  SIGNAL scale7                           : real := 0.0; -- double
  SIGNAL scaletypeconvert7                : real := 0.0; -- double
  -- Section 7 Signals 
  SIGNAL a1sum7                           : real := 0.0; -- double
  SIGNAL a2sum7                           : real := 0.0; -- double
  SIGNAL b1sum7                           : real := 0.0; -- double
  SIGNAL b2sum7                           : real := 0.0; -- double
  SIGNAL delay_section7                   : delay_pipeline_type(0 TO 1) := (0.0, 0.0); -- double
  SIGNAL inputconv7                       : real := 0.0; -- double
  SIGNAL a2mul7                           : real := 0.0; -- double
  SIGNAL a3mul7                           : real := 0.0; -- double
  SIGNAL b2mul7                           : real := 0.0; -- double
  SIGNAL scale8                           : real := 0.0; -- double
  SIGNAL scaletypeconvert8                : real := 0.0; -- double
  -- Section 8 Signals 
  SIGNAL a1sum8                           : real := 0.0; -- double
  SIGNAL a2sum8                           : real := 0.0; -- double
  SIGNAL b1sum8                           : real := 0.0; -- double
  SIGNAL b2sum8                           : real := 0.0; -- double
  SIGNAL delay_section8                   : delay_pipeline_type(0 TO 1) := (0.0, 0.0); -- double
  SIGNAL inputconv8                       : real := 0.0; -- double
  SIGNAL a2mul8                           : real := 0.0; -- double
  SIGNAL a3mul8                           : real := 0.0; -- double
  SIGNAL b2mul8                           : real := 0.0; -- double
  SIGNAL scale9                           : real := 0.0; -- double
  SIGNAL scaletypeconvert9                : real := 0.0; -- double
  -- Section 9 Signals 
  SIGNAL a1sum9                           : real := 0.0; -- double
  SIGNAL a2sum9                           : real := 0.0; -- double
  SIGNAL b1sum9                           : real := 0.0; -- double
  SIGNAL b2sum9                           : real := 0.0; -- double
  SIGNAL delay_section9                   : delay_pipeline_type(0 TO 1) := (0.0, 0.0); -- double
  SIGNAL inputconv9                       : real := 0.0; -- double
  SIGNAL a2mul9                           : real := 0.0; -- double
  SIGNAL a3mul9                           : real := 0.0; -- double
  SIGNAL b2mul9                           : real := 0.0; -- double
  SIGNAL scale10                          : real := 0.0; -- double
  SIGNAL scaletypeconvert10               : real := 0.0; -- double
  -- Section 10 Signals 
  SIGNAL a1sum10                          : real := 0.0; -- double
  SIGNAL a2sum10                          : real := 0.0; -- double
  SIGNAL b1sum10                          : real := 0.0; -- double
  SIGNAL b2sum10                          : real := 0.0; -- double
  SIGNAL delay_section10                  : delay_pipeline_type(0 TO 1) := (0.0, 0.0); -- double
  SIGNAL inputconv10                      : real := 0.0; -- double
  SIGNAL a2mul10                          : real := 0.0; -- double
  SIGNAL a3mul10                          : real := 0.0; -- double
  SIGNAL b2mul10                          : real := 0.0; -- double
  SIGNAL scale11                          : real := 0.0; -- double
  SIGNAL scaletypeconvert11               : real := 0.0; -- double
  -- Section 11 Signals 
  SIGNAL a1sum11                          : real := 0.0; -- double
  SIGNAL a2sum11                          : real := 0.0; -- double
  SIGNAL b1sum11                          : real := 0.0; -- double
  SIGNAL b2sum11                          : real := 0.0; -- double
  SIGNAL delay_section11                  : delay_pipeline_type(0 TO 1) := (0.0, 0.0); -- double
  SIGNAL inputconv11                      : real := 0.0; -- double
  SIGNAL a2mul11                          : real := 0.0; -- double
  SIGNAL a3mul11                          : real := 0.0; -- double
  SIGNAL b2mul11                          : real := 0.0; -- double
  SIGNAL scale12                          : real := 0.0; -- double
  SIGNAL scaletypeconvert12               : real := 0.0; -- double
  -- Section 12 Signals 
  SIGNAL a1sum12                          : real := 0.0; -- double
  SIGNAL a2sum12                          : real := 0.0; -- double
  SIGNAL b1sum12                          : real := 0.0; -- double
  SIGNAL b2sum12                          : real := 0.0; -- double
  SIGNAL delay_section12                  : delay_pipeline_type(0 TO 1) := (0.0, 0.0); -- double
  SIGNAL inputconv12                      : real := 0.0; -- double
  SIGNAL a2mul12                          : real := 0.0; -- double
  SIGNAL a3mul12                          : real := 0.0; -- double
  SIGNAL b2mul12                          : real := 0.0; -- double
  SIGNAL scale13                          : real := 0.0; -- double
  SIGNAL scaletypeconvert13               : real := 0.0; -- double
  -- Section 13 Signals 
  SIGNAL a1sum13                          : real := 0.0; -- double
  SIGNAL a2sum13                          : real := 0.0; -- double
  SIGNAL b1sum13                          : real := 0.0; -- double
  SIGNAL b2sum13                          : real := 0.0; -- double
  SIGNAL delay_section13                  : delay_pipeline_type(0 TO 1) := (0.0, 0.0); -- double
  SIGNAL inputconv13                      : real := 0.0; -- double
  SIGNAL a2mul13                          : real := 0.0; -- double
  SIGNAL a3mul13                          : real := 0.0; -- double
  SIGNAL b2mul13                          : real := 0.0; -- double
  SIGNAL scale14                          : real := 0.0; -- double
  SIGNAL scaletypeconvert14               : real := 0.0; -- double
  -- Section 14 Signals 
  SIGNAL a1sum14                          : real := 0.0; -- double
  SIGNAL a2sum14                          : real := 0.0; -- double
  SIGNAL b1sum14                          : real := 0.0; -- double
  SIGNAL b2sum14                          : real := 0.0; -- double
  SIGNAL delay_section14                  : delay_pipeline_type(0 TO 1) := (0.0, 0.0); -- double
  SIGNAL inputconv14                      : real := 0.0; -- double
  SIGNAL a2mul14                          : real := 0.0; -- double
  SIGNAL a3mul14                          : real := 0.0; -- double
  SIGNAL b2mul14                          : real := 0.0; -- double
  SIGNAL scale15                          : real := 0.0; -- double
  SIGNAL scaletypeconvert15               : real := 0.0; -- double
  -- Section 15 Signals 
  SIGNAL a1sum15                          : real := 0.0; -- double
  SIGNAL a2sum15                          : real := 0.0; -- double
  SIGNAL b1sum15                          : real := 0.0; -- double
  SIGNAL b2sum15                          : real := 0.0; -- double
  SIGNAL delay_section15                  : delay_pipeline_type(0 TO 1) := (0.0, 0.0); -- double
  SIGNAL inputconv15                      : real := 0.0; -- double
  SIGNAL a2mul15                          : real := 0.0; -- double
  SIGNAL a3mul15                          : real := 0.0; -- double
  SIGNAL b2mul15                          : real := 0.0; -- double
  SIGNAL scale16                          : real := 0.0; -- double
  SIGNAL scaletypeconvert16               : real := 0.0; -- double
  --   -- Section 16 Signals 
  SIGNAL a1sum16                          : real := 0.0; -- double
  SIGNAL b1sum16                          : real := 0.0; -- double
  SIGNAL delay_section16                  : real := 0.0; -- double
  SIGNAL inputconv16                      : real := 0.0; -- double
  SIGNAL a2mul16                          : real := 0.0; -- double
  SIGNAL output_typeconvert               : real := 0.0; -- double
  SIGNAL output_register                  : real := 0.0; -- double


BEGIN

  -- Block Statements
  input_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_register <= 0.0000000000000000E+00;
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        input_register <= filter_in;
      END IF;
    END IF; 
  END PROCESS input_reg_process;

  scale1 <= input_register * scaleconst1;

  scaletypeconvert1 <= scale1;


  --   ------------------ Section 1 ------------------

  delay_process_section1 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section1(0) <= 0.0000000000000000E+00;
      delay_section1(1) <= 0.0000000000000000E+00;
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_section1(1) <= delay_section1(0);
        delay_section1(0) <= a1sum1;
      END IF;
    END IF;
  END PROCESS delay_process_section1;

  inputconv1 <= scaletypeconvert1;


  a2mul1 <= delay_section1(0) * coeff_a2_section1;

  a3mul1 <= delay_section1(1) * coeff_a3_section1;

  b2mul1 <= delay_section1(0) * coeff_b2_section1;

  a2sum1 <= inputconv1 - a2mul1;

  a1sum1 <= a2sum1 - a3mul1;

  b2sum1 <= a1sum1 + b2mul1;

  b1sum1 <= b2sum1 + delay_section1(1);

  scale2 <= b1sum1 * scaleconst2;

  scaletypeconvert2 <= scale2;


  --   ------------------ Section 2 ------------------

  delay_process_section2 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section2(0) <= 0.0000000000000000E+00;
      delay_section2(1) <= 0.0000000000000000E+00;
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_section2(1) <= delay_section2(0);
        delay_section2(0) <= a1sum2;
      END IF;
    END IF;
  END PROCESS delay_process_section2;

  inputconv2 <= scaletypeconvert2;


  a2mul2 <= delay_section2(0) * coeff_a2_section2;

  a3mul2 <= delay_section2(1) * coeff_a3_section2;

  b2mul2 <= delay_section2(0) * coeff_b2_section2;

  a2sum2 <= inputconv2 - a2mul2;

  a1sum2 <= a2sum2 - a3mul2;

  b2sum2 <= a1sum2 + b2mul2;

  b1sum2 <= b2sum2 + delay_section2(1);

  scale3 <= b1sum2 * scaleconst3;

  scaletypeconvert3 <= scale3;


  --   ------------------ Section 3 ------------------

  delay_process_section3 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section3(0) <= 0.0000000000000000E+00;
      delay_section3(1) <= 0.0000000000000000E+00;
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_section3(1) <= delay_section3(0);
        delay_section3(0) <= a1sum3;
      END IF;
    END IF;
  END PROCESS delay_process_section3;

  inputconv3 <= scaletypeconvert3;


  a2mul3 <= delay_section3(0) * coeff_a2_section3;

  a3mul3 <= delay_section3(1) * coeff_a3_section3;

  b2mul3 <= delay_section3(0) * coeff_b2_section3;

  a2sum3 <= inputconv3 - a2mul3;

  a1sum3 <= a2sum3 - a3mul3;

  b2sum3 <= a1sum3 + b2mul3;

  b1sum3 <= b2sum3 + delay_section3(1);

  scale4 <= b1sum3 * scaleconst4;

  scaletypeconvert4 <= scale4;


  --   ------------------ Section 4 ------------------

  delay_process_section4 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section4(0) <= 0.0000000000000000E+00;
      delay_section4(1) <= 0.0000000000000000E+00;
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_section4(1) <= delay_section4(0);
        delay_section4(0) <= a1sum4;
      END IF;
    END IF;
  END PROCESS delay_process_section4;

  inputconv4 <= scaletypeconvert4;


  a2mul4 <= delay_section4(0) * coeff_a2_section4;

  a3mul4 <= delay_section4(1) * coeff_a3_section4;

  b2mul4 <= delay_section4(0) * coeff_b2_section4;

  a2sum4 <= inputconv4 - a2mul4;

  a1sum4 <= a2sum4 - a3mul4;

  b2sum4 <= a1sum4 + b2mul4;

  b1sum4 <= b2sum4 + delay_section4(1);

  scale5 <= b1sum4 * scaleconst5;

  scaletypeconvert5 <= scale5;


  --   ------------------ Section 5 ------------------

  delay_process_section5 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section5(0) <= 0.0000000000000000E+00;
      delay_section5(1) <= 0.0000000000000000E+00;
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_section5(1) <= delay_section5(0);
        delay_section5(0) <= a1sum5;
      END IF;
    END IF;
  END PROCESS delay_process_section5;

  inputconv5 <= scaletypeconvert5;


  a2mul5 <= delay_section5(0) * coeff_a2_section5;

  a3mul5 <= delay_section5(1) * coeff_a3_section5;

  b2mul5 <= delay_section5(0) * coeff_b2_section5;

  a2sum5 <= inputconv5 - a2mul5;

  a1sum5 <= a2sum5 - a3mul5;

  b2sum5 <= a1sum5 + b2mul5;

  b1sum5 <= b2sum5 + delay_section5(1);

  scale6 <= b1sum5 * scaleconst6;

  scaletypeconvert6 <= scale6;


  --   ------------------ Section 6 ------------------

  delay_process_section6 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section6(0) <= 0.0000000000000000E+00;
      delay_section6(1) <= 0.0000000000000000E+00;
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_section6(1) <= delay_section6(0);
        delay_section6(0) <= a1sum6;
      END IF;
    END IF;
  END PROCESS delay_process_section6;

  inputconv6 <= scaletypeconvert6;


  a2mul6 <= delay_section6(0) * coeff_a2_section6;

  a3mul6 <= delay_section6(1) * coeff_a3_section6;

  b2mul6 <= delay_section6(0) * coeff_b2_section6;

  a2sum6 <= inputconv6 - a2mul6;

  a1sum6 <= a2sum6 - a3mul6;

  b2sum6 <= a1sum6 + b2mul6;

  b1sum6 <= b2sum6 + delay_section6(1);

  scale7 <= b1sum6 * scaleconst7;

  scaletypeconvert7 <= scale7;


  --   ------------------ Section 7 ------------------

  delay_process_section7 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section7(0) <= 0.0000000000000000E+00;
      delay_section7(1) <= 0.0000000000000000E+00;
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_section7(1) <= delay_section7(0);
        delay_section7(0) <= a1sum7;
      END IF;
    END IF;
  END PROCESS delay_process_section7;

  inputconv7 <= scaletypeconvert7;


  a2mul7 <= delay_section7(0) * coeff_a2_section7;

  a3mul7 <= delay_section7(1) * coeff_a3_section7;

  b2mul7 <= delay_section7(0) * coeff_b2_section7;

  a2sum7 <= inputconv7 - a2mul7;

  a1sum7 <= a2sum7 - a3mul7;

  b2sum7 <= a1sum7 + b2mul7;

  b1sum7 <= b2sum7 + delay_section7(1);

  scale8 <= b1sum7 * scaleconst8;

  scaletypeconvert8 <= scale8;


  --   ------------------ Section 8 ------------------

  delay_process_section8 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section8(0) <= 0.0000000000000000E+00;
      delay_section8(1) <= 0.0000000000000000E+00;
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_section8(1) <= delay_section8(0);
        delay_section8(0) <= a1sum8;
      END IF;
    END IF;
  END PROCESS delay_process_section8;

  inputconv8 <= scaletypeconvert8;


  a2mul8 <= delay_section8(0) * coeff_a2_section8;

  a3mul8 <= delay_section8(1) * coeff_a3_section8;

  b2mul8 <= delay_section8(0) * coeff_b2_section8;

  a2sum8 <= inputconv8 - a2mul8;

  a1sum8 <= a2sum8 - a3mul8;

  b2sum8 <= a1sum8 + b2mul8;

  b1sum8 <= b2sum8 + delay_section8(1);

  scale9 <= b1sum8 * scaleconst9;

  scaletypeconvert9 <= scale9;


  --   ------------------ Section 9 ------------------

  delay_process_section9 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section9(0) <= 0.0000000000000000E+00;
      delay_section9(1) <= 0.0000000000000000E+00;
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_section9(1) <= delay_section9(0);
        delay_section9(0) <= a1sum9;
      END IF;
    END IF;
  END PROCESS delay_process_section9;

  inputconv9 <= scaletypeconvert9;


  a2mul9 <= delay_section9(0) * coeff_a2_section9;

  a3mul9 <= delay_section9(1) * coeff_a3_section9;

  b2mul9 <= delay_section9(0) * coeff_b2_section9;

  a2sum9 <= inputconv9 - a2mul9;

  a1sum9 <= a2sum9 - a3mul9;

  b2sum9 <= a1sum9 + b2mul9;

  b1sum9 <= b2sum9 + delay_section9(1);

  scale10 <= b1sum9 * scaleconst10;

  scaletypeconvert10 <= scale10;


  --   ------------------ Section 10 ------------------

  delay_process_section10 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section10(0) <= 0.0000000000000000E+00;
      delay_section10(1) <= 0.0000000000000000E+00;
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_section10(1) <= delay_section10(0);
        delay_section10(0) <= a1sum10;
      END IF;
    END IF;
  END PROCESS delay_process_section10;

  inputconv10 <= scaletypeconvert10;


  a2mul10 <= delay_section10(0) * coeff_a2_section10;

  a3mul10 <= delay_section10(1) * coeff_a3_section10;

  b2mul10 <= delay_section10(0) * coeff_b2_section10;

  a2sum10 <= inputconv10 - a2mul10;

  a1sum10 <= a2sum10 - a3mul10;

  b2sum10 <= a1sum10 + b2mul10;

  b1sum10 <= b2sum10 + delay_section10(1);

  scale11 <= b1sum10 * scaleconst11;

  scaletypeconvert11 <= scale11;


  --   ------------------ Section 11 ------------------

  delay_process_section11 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section11(0) <= 0.0000000000000000E+00;
      delay_section11(1) <= 0.0000000000000000E+00;
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_section11(1) <= delay_section11(0);
        delay_section11(0) <= a1sum11;
      END IF;
    END IF;
  END PROCESS delay_process_section11;

  inputconv11 <= scaletypeconvert11;


  a2mul11 <= delay_section11(0) * coeff_a2_section11;

  a3mul11 <= delay_section11(1) * coeff_a3_section11;

  b2mul11 <= delay_section11(0) * coeff_b2_section11;

  a2sum11 <= inputconv11 - a2mul11;

  a1sum11 <= a2sum11 - a3mul11;

  b2sum11 <= a1sum11 + b2mul11;

  b1sum11 <= b2sum11 + delay_section11(1);

  scale12 <= b1sum11 * scaleconst12;

  scaletypeconvert12 <= scale12;


  --   ------------------ Section 12 ------------------

  delay_process_section12 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section12(0) <= 0.0000000000000000E+00;
      delay_section12(1) <= 0.0000000000000000E+00;
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_section12(1) <= delay_section12(0);
        delay_section12(0) <= a1sum12;
      END IF;
    END IF;
  END PROCESS delay_process_section12;

  inputconv12 <= scaletypeconvert12;


  a2mul12 <= delay_section12(0) * coeff_a2_section12;

  a3mul12 <= delay_section12(1) * coeff_a3_section12;

  b2mul12 <= delay_section12(0) * coeff_b2_section12;

  a2sum12 <= inputconv12 - a2mul12;

  a1sum12 <= a2sum12 - a3mul12;

  b2sum12 <= a1sum12 + b2mul12;

  b1sum12 <= b2sum12 + delay_section12(1);

  scale13 <= b1sum12 * scaleconst13;

  scaletypeconvert13 <= scale13;


  --   ------------------ Section 13 ------------------

  delay_process_section13 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section13(0) <= 0.0000000000000000E+00;
      delay_section13(1) <= 0.0000000000000000E+00;
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_section13(1) <= delay_section13(0);
        delay_section13(0) <= a1sum13;
      END IF;
    END IF;
  END PROCESS delay_process_section13;

  inputconv13 <= scaletypeconvert13;


  a2mul13 <= delay_section13(0) * coeff_a2_section13;

  a3mul13 <= delay_section13(1) * coeff_a3_section13;

  b2mul13 <= delay_section13(0) * coeff_b2_section13;

  a2sum13 <= inputconv13 - a2mul13;

  a1sum13 <= a2sum13 - a3mul13;

  b2sum13 <= a1sum13 + b2mul13;

  b1sum13 <= b2sum13 + delay_section13(1);

  scale14 <= b1sum13 * scaleconst14;

  scaletypeconvert14 <= scale14;


  --   ------------------ Section 14 ------------------

  delay_process_section14 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section14(0) <= 0.0000000000000000E+00;
      delay_section14(1) <= 0.0000000000000000E+00;
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_section14(1) <= delay_section14(0);
        delay_section14(0) <= a1sum14;
      END IF;
    END IF;
  END PROCESS delay_process_section14;

  inputconv14 <= scaletypeconvert14;


  a2mul14 <= delay_section14(0) * coeff_a2_section14;

  a3mul14 <= delay_section14(1) * coeff_a3_section14;

  b2mul14 <= delay_section14(0) * coeff_b2_section14;

  a2sum14 <= inputconv14 - a2mul14;

  a1sum14 <= a2sum14 - a3mul14;

  b2sum14 <= a1sum14 + b2mul14;

  b1sum14 <= b2sum14 + delay_section14(1);

  scale15 <= b1sum14 * scaleconst15;

  scaletypeconvert15 <= scale15;


  --   ------------------ Section 15 ------------------

  delay_process_section15 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section15(0) <= 0.0000000000000000E+00;
      delay_section15(1) <= 0.0000000000000000E+00;
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_section15(1) <= delay_section15(0);
        delay_section15(0) <= a1sum15;
      END IF;
    END IF;
  END PROCESS delay_process_section15;

  inputconv15 <= scaletypeconvert15;


  a2mul15 <= delay_section15(0) * coeff_a2_section15;

  a3mul15 <= delay_section15(1) * coeff_a3_section15;

  b2mul15 <= delay_section15(0) * coeff_b2_section15;

  a2sum15 <= inputconv15 - a2mul15;

  a1sum15 <= a2sum15 - a3mul15;

  b2sum15 <= a1sum15 + b2mul15;

  b1sum15 <= b2sum15 + delay_section15(1);

  scale16 <= b1sum15 * scaleconst16;

  scaletypeconvert16 <= scale16;


  --   ------------------ Section 16 (First Order) ------------------

  delay_process_section16 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section16 <= 0.0000000000000000E+00;
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_section16 <= a1sum16;
      END IF;
    END IF; 
  END PROCESS delay_process_section16;

  inputconv16 <= scaletypeconvert16;


  a2mul16 <= delay_section16 * coeff_a2_section16;

  a1sum16 <= inputconv16 - a2mul16;

  b1sum16 <= a1sum16 + delay_section16;

  output_typeconvert <= b1sum16;


  Output_Register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= 0.0000000000000000E+00;
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS Output_Register_process;

  -- Assignment Statements
  filter_out <= output_register;
END rtl;
