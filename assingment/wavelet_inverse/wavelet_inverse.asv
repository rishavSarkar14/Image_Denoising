clc;
clear all;
close all;
% reading the image
Original_Image = imread('C:\Users\Aniket Sourav\Desktop\123.jpeg');

% convert to grayscale
Original_Image = rgb2gray(Original_Image);

% add noise  to image
Noisy_image = imnoise(Original_Image, 'speckle');

% choose type of thresholding (hard or soft)
type = 'h';

% applying dwt to the image and it's components 
[A1, H1, V1, D1] = dwt2(Noisy_image, 'db1'); % level - 1
[A2, H2, V2, D2] = dwt2(A1, 'db1'); % level - 2
[A3, H3, V3, D3] = dwt2(A2, 'db1'); % level - 3


%% LEVEL - 3
% find threshold on detail components
T_cH3 = sigthresh(H3, 3, H3);
T_cV3 = sigthresh(V3, 3, V3);
T_cD3 = sigthresh(D3, 3, D3);
% apply threshold, these matrices are denoised before image reconstruction
Y_cH3 = wthresh(H3, type, T_cH3);
Y_cV3 = wthresh(H3, type, T_cV3);
Y_cD3 = wthresh(H3, type, T_cD3);

%% LEVEL - 2
% find threshold on detail components
T_cH2 = sigthresh(H2, 2, H2);
T_cV2 = sigthresh(V2, 2, V2);
T_cD2 = sigthresh(D2, 2, D2);
% apply threshold, these matrices are denoised before image reconstruction
Y_cH2 = wthresh(H2, type, T_cH2);
Y_cV2 = wthresh(V2, type, T_cV2);
Y_cD2 = wthresh(D2, type, T_cD2);

%% LEVEL - 1
% find threshold on detail components
T_cH1 = sigthresh(H1, 1, H1);
T_cV1 = sigthresh(V1, 1, V1);
T_cD1 = sigthresh(D1, 1, D1);
% apply threshold, these matrices are denoised before image reconstruction
Y_cH1 = wthresh(H1, type, T_cH1);
Y_cV1 = wthresh(V1, type, T_cV1);
Y_cD1 = wthresh(D1, type, T_cD1);

% apply inverse discrete wavelet transform on all levels
Y_cA2 = idwt2(A3, Y_cH3, Y_cV3, Y_cD3, 'db1');
Y_cA1 = idwt2(A2, Y_cH2, Y_cV2, Y_cD2, 'db1');
Y_cA = idwt2(A1, Y_cH1, Y_cV1, Y_cD1, 'db1');

figure(1); imshow(Original_Image);
title("Original image");
figure(2); imshow(Noisy_image);
title("Noisy Image");
figure(3); imshow(uint8(Y_cA));
title("Filtered image");

